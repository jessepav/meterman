Add "loadImage(Path p, String imageName)", "unloadImage(String imageName)", "unloadAllImages()", methods to
MetermanUI, change setXXXImage() methods to use an image-name instead of a BufferedImage, so that games
don't have to touch the java.awt API. Remember to unloadAllImages() when starting/loading a game. This way
we can also keep the default frame-image around, references by a special name.

clear sound manager and UI images when starting or loading a game

Add a sort of "DelegatingEntity" which forwards its various methods to a handler object, the methods of
which accept an additional parameter of the DelegatingEntity itself. This allows one class to implement
custom behavior for many different entities. The delegate can differentiate individual entites by
comparing by identity--since it knows which entities were created when the world was instantiated--or
by some custom ID field added to DelegatingEntity (which will actually be the custom entity class for
a particular game).

BeanShell implementations of the delegate (used by DelegatingEntity), and of the world initialization
routine.

Also DelegatingRoom, and BeanShell implementation.

== And then... ==

Write the Riverboat, modifying the engine as-needed to enable required features.


== Things I won't do ==

[Actually, don't do this:  the frame images are still visible when the dialogs appear, so there's still
 some graphical feedback (like entity image) while viewing dialog text. If I want to ensure that the images
 are visible I could position the dialogs to the immediate right of the FrameImagePanel instead of the center
 of the frame.]

   Add a side image panel to the XxxDialogS, that accepts the same imageName parameter as the frame image.
   If the imageName is null, the panel will be hidden (set a preferred size of 150x400). I don't need a
   custom JPanel subclass for this, but can just pop an Image into an ImageIcon and use a JLabel.
