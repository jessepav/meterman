Add parent-chaining to TextBundle, like the one in Properties. This way default messages can be stored in
the system TextBundle and overridden by using the same passage heading in the game TextBundle.

Should each Game have a getBundle() method to supply a TextBundle used globally?

No! The WorldUtils class will have all sorts of methods to build up and connect various classes (entities,
rooms, doors, etc.) and will handle using text bundles in an elegant way.

Add "loadImage(Path p, String imageName)", "unloadImage(String imageName)", "unloadAllImages()", methods to
MetermanUI, change setXXXImage() methods to use an image-name instead of a BufferedImage, so that games
don't have to touch the java.awt API. Remember to unloadAllImages() when starting/loading a game. This way
we can also keep the default frame-image around, references by a special name. Calling loadImage() with an
already-loaded imageName will do nothing--so a Room or Entity can safely call loadImage() each time it wants
to display that image, with no deleterious effects.

clear sound manager and UI images when starting or loading a game

== And then... ==

Write the Riverboat, modifying the engine as-needed to enable required features.


== Things I won't do ==

[Actually, don't do this:  the frame images are still visible when the dialogs appear, so there's still
 some graphical feedback (like entity image) while viewing dialog text. If I want to ensure that the images
 are visible I could position the dialogs to the immediate right of the FrameImagePanel instead of the center
 of the frame.]

   Add a side image panel to the XxxDialogS, that accepts the same imageName parameter as the frame image.
   If the imageName is null, the panel will be hidden (set a preferred size of 150x400). I don't need a
   custom JPanel subclass for this, but can just pop an Image into an ImageIcon and use a JLabel.
