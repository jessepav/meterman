            Meterman Design Notes
            ---------------------

"Actions" are not general purpose messages that can be dispatched to any entity--they
are specifically the result of the user selecting an action-word in the UI for the
selected entity. Thus "Look" and "Wait" are not actions.

Given the suggested dimensions of frame images (150x400) and entity images (140x140),
using abstract or symbolic graphics could be more effective than attempting standard
representational game art.

Each game can stuff a big POD object into the world-data so that state can be shared amongst its
components without mucking with String world-data keys and type casts.

"Winning" and "losing" can be implemented by creating special rooms that display appropriate messages and
have no exits. Unless one wants to implement an afterlife, of course.

== On the Engine and Games ==

Given that I wrote Meterman inspired by the unified structure of mainframe Zork--which was
a program in itself, not a story file for some other engine--I will continue Meterman's
development in the same vein. I won't split up my games into separate projects, but will
keep them alongside the engine's source tree, so that I can make changes to either code
base freely, without worrying about violating interfaces.

When I want to move on to new games without worrying about keeping the old games in sync
with the engine, I'll create a new repository and project, call it "Meterman2", and start
making the new games and any engine changes they need, while leaving the old ones entirely
playable in the "Meterman Classic" engine. In this way it's like generations passing,
each one having a few sibling games.


== Some big picture code notes ==

- This was the note as I originally wrote it:

      ┌─────────────────────────────────────────────────────────────────────────┐
      │ References (say, room to room exits, or the location of items) will be  │
      │ stored as unique string identifiers (ex. "turnip-room") rather than     │
      │ actual Java object references. There will be a mapper class that will   │
      │ return the Java Room or Entity that corresponds to a given ID. This     │
      │ avoids having a tangled object graph, which makes it easier to          │
      │ instantiate and serialize the game world.                               │
      │                                                                         │
      │ The ID corresponds to a Java class, rather than to any name displayed   │
      │ to the user, so two Entity instances could have different names while   │
      │ sharing the same class.                                                 │
      │                                                                         │
      │ In the event that the ID isn't found as a map key, then a default error │
      │ object will be returned, that has a description like "A misty void      │
      │ gapes where you expected to find the <missing ID>, revealing an error   │
      │ in the world's programmers."                                            │
      └─────────────────────────────────────────────────────────────────────────┘
      
  but I decided to remove the whole ClassMapper infrastructure, because it was too much
  complexity for no benefit. Just as in Treehouse, I decided--partway through--to have my
  world vivified in code, not by JSON or XML files, and so being able to specify rooms
  and entities by name wasn't important anymore. Designing an elegant API to create
  Rooms and Entities and wire them together will be more flexible, and if I want to be
  able to use the API without recompiling, I can use BeanShell scripts. Kryo can serialize
  object graphs with circular references without a problem.
  
- There will be one big GameState object that contains the whole game world graph. This
  will be serialized and deserialized (using kryo) to implement save/restore (and possibly
  even undo) functionality. Given that kryo can round-trip 1000000+ objects in a second,
  and my game world will have less than 1000 objects, using it for undo should be feasible.

- Upon starting a new game, the entire game world will be instantiated. Rooms and entities
  will be constructed, all of their init() methods called, and entities will be placed in
  rooms based on the room ID given in a configuration file.

- Every Room and Entity will have a no-arg constructor that doesn't actually initialize
  the game state, so that they can be deserialized properly. Initial game state will be
  set in the init() method.

- The UI will be in a separate package, abstracted from the Swing/AWT API, so that I can
  switch to a different UI--like libGDX or GWT--in the future.

- Should each Game have a getBundle() method to supply a TextBundle used globally?

   No! The WorldBuilder class will have all sorts of methods to build up and connect various
   classes (entities, rooms, doors, etc.) and will handle using text bundles in an elegant
   way. And a reference to the bundle will be stored by the classes that need them.

- "Managers" (i.e. listeners or delegates that coordinate various objects) are registered
  with the GameManager by Game#start at the beginning of a new (not loaded) game.
  Additionally, they stash an instance of themselves in the worldData (keyed by
  fully-qualified class name), so that other objects can access them during game time.

== Game "Plugin" System ==

Implement a mechanism to load games dynamically from JAR (code) and ZIP (resources). We
could use a Java plugin framework like JPF or pf4j, but that requires more structure than
I may want. Alternately, we could install a game by

    1. Putting GameName.jar file in the "jar" subdirectory.
    2. Putting GameName-assets.zip in the "assets" subdirectory.
    3. Putting GameName-glue.bsh in the "glue" subdirectory.

The glue is what makes dynamic discovery easy (easy as in using what I already know). When
Meterman starts, it will run each BeanShell script in "glue", each of which should implement
a discovery interface:

  public interface MetermanGameGlue {
      String getName();
      String getDescription();
      String getAssetsPath();
      Game createGame();
  }

This is basically what the current GamesList class does, with its hardcoded list of games.
The script or launcher that runs Meterman will have already added all the jars in "jar" to
the classpath, so we don't have to deal with that issue, which is one of the major facilities
of the real plugin frameworks.

When I finish setting up the game "plugin" system, I'll migrate the current games out of the
Meterman source tree into a separate directory (and separate IDEA module), so I can work on
each one individually.

== BeanShell Scripted Delegates ==

I can have BeanShell scripts that implement the EntityDelegate and RoomDelegate interfaces
without actually implementing all the methods. After eval'ing the script, I can use the
NameSpace#getMethodNames method to find which delegate methods are actually implemented,
and only call the proxy for those methods, using the default BaseEntity implementations
for the others.

WorldBuilder additional methods: loadScriptedEntity, loadScriptedRoom (we don't have the
readScriptedXXXDataFromBundle methods because the whole point is to script the object
without subclassing).

Scripted objects should *not* depend on any persistent state, but should only use the
state in the "game global" object pulled from world-data, because they'll be persisted
using a custom serializer that just reloads the script from which they were sourced.

== Transcripts/Replay/Jumping through Game ==

- Transcripts & Replay -

  Add a "transcript" and "replay" feature that operates in terms of UI events:
  exit-selected, entity-selected, entity-action-performed. In the absence of randomness,
  this should bring a game to the same state at which the transcript ends. It will be
  saved in a serialized format. New menu in UI, Transcript; menu items "Begin
  recording...", "End Recording", "Replay", "View". Ay...this won't work, because of
  "extra-UI" actions like TalkingEntities, or custom list- or prompt-dialogs, etc.
  Nevermind. Maybe we could just make, eventually, a WorldState viewer/editor.

  Actually, this could work after all, since there are a limited no. of ways the game can
  get user input: the main UI + dialogs. We could record the return value of each dialog
  call and return it to the game code on each invocation, in order.

- Manually Setting State -

  To jump to later parts of a game during development, I don't need to have a "replay"
  feature or use compatible serialization for save data, but can write a routine that will
  set up the world state properly for the later part of the game, including listeners and
  such, and then teleport the player to the correct room. Such "god mode" routines can be
  invoked with a special keystroke that will pop up a prompt dialog, which then accepts
  different god mode commands.

  A corollary to this: try to keep all state for the game in the "state objects" that were
  described earlier (like RiverboatStatePart1) rather than distributed haphazardly among
  several classes -- in this way we can define the state object appropriately and the game
  world will spring to life consistently.


------------------------------------------------------------
:maxLineLen=90:noTabs=true:indentSize=2:
