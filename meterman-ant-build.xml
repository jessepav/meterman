<?xml version="1.0" encoding="UTF-8"?>
<project name="meterman" default="all">
  
  
  <property file="meterman-ant-build.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="256m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/.bundle/**"/>
    <exclude name="**/*.rbc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.zip"/>
    <include name="*.apk"/>
    <include name="*.war"/>
    <include name="*.egg"/>
    <include name="*.ear"/>
    <include name="*.ane"/>
    <include name="*.swc"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
  </patternset>
  
  
  <!-- Project Libraries -->
  
  <path id="library.beanshell.classpath">
    <pathelement location="${basedir}/lib/bsh-2.1.0-SNAPSHOT.jar"/>
  </path>
  
  <path id="library.commons-codec.classpath">
    <pathelement location="${basedir}/lib/commons-codec-1.11.jar"/>
  </path>
  
  <path id="library.commons-lang3.classpath">
    <pathelement location="${basedir}/lib/commons-lang3-3.4.jar"/>
  </path>
  
  <path id="library.jdom.classpath">
    <pathelement location="${basedir}/lib/jaxen-1.1.6.jar"/>
    <pathelement location="${basedir}/lib/jdom-2.0.6.jar"/>
  </path>
  
  <path id="library.jfd-loader.classpath">
    <pathelement location="${basedir}/lib/jfd-loader.jar"/>
  </path>
  
  <path id="library.jgoodies-forms.classpath">
    <pathelement location="${basedir}/lib/jgoodies-common-1.8.1.jar"/>
    <pathelement location="${basedir}/lib/jgoodies-forms-1.7.2.jar"/>
  </path>
  
  <path id="library.kryo.classpath">
    <pathelement location="${basedir}/lib/kryo-4.0.2.jar"/>
    <pathelement location="${basedir}/lib/kryo-serializers-0.42.jar"/>
    <pathelement location="${basedir}/lib/minlog-1.3.0.jar"/>
    <pathelement location="${basedir}/lib/objenesis-2.1.jar"/>
    <pathelement location="${basedir}/lib/reflectasm-1.10.1-shaded.jar"/>
  </path>
  
  <path id="library.minimal-json.classpath">
    <pathelement location="${basedir}/lib/minimal-json-0.9.5.jar"/>
  </path>
  
  <path id="library.tinysound.classpath">
    <pathelement location="${basedir}/lib/jorbis-0.0.17.jar"/>
    <pathelement location="${basedir}/lib/tinysound-1.1.1-local.jar"/>
    <pathelement location="${basedir}/lib/tritonus_share.jar"/>
    <pathelement location="${basedir}/lib/vorbisspi1.0.3.jar"/>
  </path>
  
  <!-- Modules -->
  
  
  <!-- Module meterman -->
  
  <dirname property="module.meterman.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.meterman" value="-encoding UTF-8 -source 1.7 ${compiler.args}"/>
  
  <property name="meterman.output.dir" value="${module.meterman.basedir}/build/production/meterman"/>
  <property name="meterman.testoutput.dir" value="${module.meterman.basedir}/build/test/meterman"/>
  
  <path id="meterman.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="meterman.module.production.classpath">
    <path refid="library.beanshell.classpath"/>
    <path refid="library.commons-lang3.classpath"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.jfd-loader.classpath"/>
    <path refid="library.jgoodies-forms.classpath"/>
    <path refid="library.tinysound.classpath"/>
    <path refid="library.minimal-json.classpath"/>
    <path refid="library.commons-codec.classpath"/>
    <path refid="library.kryo.classpath"/>
  </path>
  
  <path id="meterman.runtime.production.module.classpath">
    <pathelement location="${meterman.output.dir}"/>
    <path refid="library.beanshell.classpath"/>
    <path refid="library.commons-lang3.classpath"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.jfd-loader.classpath"/>
    <path refid="library.jgoodies-forms.classpath"/>
    <path refid="library.tinysound.classpath"/>
    <path refid="library.minimal-json.classpath"/>
    <path refid="library.commons-codec.classpath"/>
    <path refid="library.kryo.classpath"/>
  </path>
  
  <path id="meterman.module.classpath">
    <pathelement location="${meterman.output.dir}"/>
    <path refid="library.beanshell.classpath"/>
    <path refid="library.commons-lang3.classpath"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.jfd-loader.classpath"/>
    <path refid="library.jgoodies-forms.classpath"/>
    <path refid="library.tinysound.classpath"/>
    <path refid="library.minimal-json.classpath"/>
    <path refid="library.commons-codec.classpath"/>
    <path refid="library.kryo.classpath"/>
  </path>
  
  <path id="meterman.runtime.module.classpath">
    <pathelement location="${meterman.testoutput.dir}"/>
    <pathelement location="${meterman.output.dir}"/>
    <path refid="library.beanshell.classpath"/>
    <path refid="library.commons-lang3.classpath"/>
    <path refid="library.jdom.classpath"/>
    <path refid="library.jfd-loader.classpath"/>
    <path refid="library.jgoodies-forms.classpath"/>
    <path refid="library.tinysound.classpath"/>
    <path refid="library.minimal-json.classpath"/>
    <path refid="library.commons-codec.classpath"/>
    <path refid="library.kryo.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.meterman">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.meterman">
    <patternset refid="excluded.from.module.meterman"/>
  </patternset>
  
  <path id="meterman.module.sourcepath">
    <dirset dir="${module.meterman.basedir}">
      <include name="src"/>
      <include name="forms"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.meterman" depends="compile.module.meterman.production,compile.module.meterman.tests" description="Compile module meterman"/>
  
  <target name="compile.module.meterman.production" description="Compile module meterman; production classes">
    <mkdir dir="${meterman.output.dir}"/>
    <javac destdir="${meterman.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.meterman}"/>
      <bootclasspath refid="meterman.module.bootclasspath"/>
      <classpath refid="meterman.module.production.classpath"/>
      <src refid="meterman.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.meterman"/>
    </javac>
    
    <copy todir="${meterman.output.dir}">
      <fileset dir="${module.meterman.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
    <copy todir="${meterman.output.dir}/com/illcode/meterman/ui/swingui">
      <fileset dir="${module.meterman.basedir}/forms">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.meterman.tests" depends="compile.module.meterman.production" description="compile module meterman; test classes" unless="skip.tests"/>
  
  <target name="clean.module.meterman" description="cleanup module">
    <delete dir="${meterman.output.dir}"/>
    <delete dir="${meterman.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.meterman, clean.artifact.meterman:jar" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.meterman" description="build all modules"/>
  
  <target name="init.artifacts">
    <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
    <property name="artifact.output.meterman:jar" value="${basedir}/build/artifacts/meterman_jar"/>
    <mkdir dir="${artifacts.temp.dir}"/>
    <property name="temp.jar.path.meterman.jar" value="${artifacts.temp.dir}/meterman.jar"/>
  </target>
  
  <target name="clean.artifact.meterman:jar" description="clean meterman:jar artifact output">
    <delete dir="${artifact.output.meterman:jar}"/>
  </target>
  
  <target name="artifact.meterman:jar" depends="init.artifacts, compile.module.meterman" description="Build &#39;meterman:jar&#39; artifact">
    <mkdir dir="${artifact.output.meterman:jar}"/>
    <jar destfile="${temp.jar.path.meterman.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${meterman.output.dir}"/>
    </jar>
    <copy file="${temp.jar.path.meterman.jar}" tofile="${artifact.output.meterman:jar}/meterman.jar"/>
    <mkdir dir="${artifact.output.meterman:jar}/config"/>
    <copy todir="${artifact.output.meterman:jar}/config">
      <fileset dir="${basedir}/config"/>
    </copy>
    <mkdir dir="${artifact.output.meterman:jar}/lib"/>
    <copy file="${basedir}/lib/bsh-2.1.0-SNAPSHOT.jar" tofile="${artifact.output.meterman:jar}/lib/bsh-2.1.0-SNAPSHOT.jar"/>
    <copy file="${basedir}/lib/commons-codec-1.11.jar" tofile="${artifact.output.meterman:jar}/lib/commons-codec-1.11.jar"/>
    <copy file="${basedir}/lib/commons-lang3-3.4.jar" tofile="${artifact.output.meterman:jar}/lib/commons-lang3-3.4.jar"/>
    <copy file="${basedir}/lib/jdom-2.0.6.jar" tofile="${artifact.output.meterman:jar}/lib/jdom-2.0.6.jar"/>
    <copy file="${basedir}/lib/jaxen-1.1.6.jar" tofile="${artifact.output.meterman:jar}/lib/jaxen-1.1.6.jar"/>
    <copy file="${basedir}/lib/jfd-loader.jar" tofile="${artifact.output.meterman:jar}/lib/jfd-loader.jar"/>
    <copy file="${basedir}/lib/jgoodies-forms-1.7.2.jar" tofile="${artifact.output.meterman:jar}/lib/jgoodies-forms-1.7.2.jar"/>
    <copy file="${basedir}/lib/jgoodies-common-1.8.1.jar" tofile="${artifact.output.meterman:jar}/lib/jgoodies-common-1.8.1.jar"/>
    <copy file="${basedir}/lib/minlog-1.3.0.jar" tofile="${artifact.output.meterman:jar}/lib/minlog-1.3.0.jar"/>
    <copy file="${basedir}/lib/objenesis-2.1.jar" tofile="${artifact.output.meterman:jar}/lib/objenesis-2.1.jar"/>
    <copy file="${basedir}/lib/reflectasm-1.10.1-shaded.jar" tofile="${artifact.output.meterman:jar}/lib/reflectasm-1.10.1-shaded.jar"/>
    <copy file="${basedir}/lib/kryo-4.0.2.jar" tofile="${artifact.output.meterman:jar}/lib/kryo-4.0.2.jar"/>
    <copy file="${basedir}/lib/kryo-serializers-0.42.jar" tofile="${artifact.output.meterman:jar}/lib/kryo-serializers-0.42.jar"/>
    <copy file="${basedir}/lib/minimal-json-0.9.5.jar" tofile="${artifact.output.meterman:jar}/lib/minimal-json-0.9.5.jar"/>
    <copy file="${basedir}/lib/tinysound-1.1.1-local.jar" tofile="${artifact.output.meterman:jar}/lib/tinysound-1.1.1-local.jar"/>
    <copy file="${basedir}/lib/jorbis-0.0.17.jar" tofile="${artifact.output.meterman:jar}/lib/jorbis-0.0.17.jar"/>
    <copy file="${basedir}/lib/tritonus_share.jar" tofile="${artifact.output.meterman:jar}/lib/tritonus_share.jar"/>
    <copy file="${basedir}/lib/vorbisspi1.0.3.jar" tofile="${artifact.output.meterman:jar}/lib/vorbisspi1.0.3.jar"/>
    <mkdir dir="${artifact.output.meterman:jar}/assets"/>
    <copy todir="${artifact.output.meterman:jar}/assets">
      <fileset dir="${basedir}/assets"/>
    </copy>
    <mkdir dir="${artifact.output.meterman:jar}/glue"/>
    <copy todir="${artifact.output.meterman:jar}/glue">
      <fileset dir="${basedir}/glue"/>
    </copy>
    <mkdir dir="${artifact.output.meterman:jar}/jars"/>
    <copy todir="${artifact.output.meterman:jar}/jars">
      <fileset dir="${basedir}/jars"/>
    </copy>
    <copy file="${basedir}/scripts/run-dist-jar.bat" tofile="${artifact.output.meterman:jar}/run-meterman.bat"/>
    <copy file="${basedir}/scripts/run-dist-jar.sh" tofile="${artifact.output.meterman:jar}/run-meterman.sh"/>
  </target>
  
  <target name="build.all.artifacts" depends="artifact.meterman:jar" description="Build all artifacts">
    
    <!-- Delete temporary files -->
    <delete dir="${artifacts.temp.dir}"/>
  </target>
  
  <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>